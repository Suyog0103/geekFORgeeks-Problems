Given an array A of n positive numbers. The task is to find the first equilibrium point in an array. Equilibrium point in an array is a position such that the sum of elements before it is equal to the sum of elements after it.

Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists. 

Example 1:

Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 
3 
Explanation:  
equilibrium point is at position 3 as sum of elements before it (1+3) = sum of elements after it (2+2). 
Example 2:

Input:
n = 1
A[] = {1}
Output: 
1
Explanation:
Since there's only element hence its only the equilibrium point.
Your Task:
The task is to complete the function equilibriumPoint() which takes the array and n as input parameters and returns the point of equilibrium. 

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 105
1 <= A[i] <= 109
____________________________________________________________________________________________________________________________
class Solution {

    
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    public static int equilibriumPoint(long arr[], int n) {

        // Your code here
         if(n==1)
        {
            return 1;
        }
        
        for(int i=1; i<n-2; i++)
        {
            long sum1=0, sum2=0;
            for(int j=0; j<i; j++)
            {
                sum1=sum1+arr[j];
            }
            
            for(int k=n-1; k>i; k--)
            {
                sum2= sum2 + arr[k];
            }
            if(sum1==sum2)
            {
                return i+1;
            }
        }
        return -1;
        
    
    }
}
___________________________________________________________________________________________________________
864 out of 1121 test cases passed (failed because of time complexity exceeded)
